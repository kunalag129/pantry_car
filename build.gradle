buildscript {
    repositories {
        maven { url "https://repo.spring.io/libs-release" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE", "org.hibernate:hibernate-core:4.3.8.Final")
    }
}

group = 'springio'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
//apply plugin: 'Docker'

war {
    baseName = 'pantry_car'
    version =  '1.7.9'
}

jar {
    baseName = 'pantry_car'
    version = '1.7.9'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/libs-release" }
}

configurations {
    providedRuntime
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    compile 'org.projectlombok:lombok:1.16.2'
    compile group: 'org.springframework', name: 'spring-framework-bom', version: '4.0.8.RELEASE'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '4.3.8.Final'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.0.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.0'
    compile group: 'commons-codec', name: "commons-codec", version: '1.8'
    testCompile("junit:junit")
}

springBoot {
    mainClass = 'controllers.Application'
}

//def addUrlIfNotPresent( to, what ) {
//    if ( !to || !what ) { return }
//    def urls = to.URLs.toList()
//    switch( what.class ) {
//        case URL: what = new File( what.toURI() ); break
//        case String: what = new File( what ); break
//        case GString: what = new File( what.toString() ); break
//        case File: break; // ok
//        default:
//            println "Don't know how to deal with $what as it is not an URL nor a File"
//            System.exit( 1 )
//    }
//    if ( what.directory && !what.exists() ) { what.mkdirs() }
//    def url = what.toURI().toURL()
//    if ( !urls.contains( url ) && ( what.directory || !urls.find{ it.path.endsWith( what.name ) } ) ) {
//        to.addURL( url )
//    }
//}
//
//compileJava.doLast {
//    Instrumentation instrumentation = new Instrumentation()
//    def projectMainClassesDir = sourceSets['main'].output.classesDir.getPath()
//    def rootLoader = this.class.classLoader.rootLoader
//    instrumentation.outputDirectory = projectMainClassesDir
//    addUrlIfNotPresent rootLoader, projectMainClassesDir
//    addUrlIfNotPresent Instrumentation.class.classLoader, projectMainClassesDir
//    instrumentation.instrument()
//}

//task buildDocker(type: Docker, dependsOn: build) {
//    push = true
//    applicationName = jar.baseName
//    dockerfile = file('src/main/docker/Dockerfile')
//    doFirst {
//        copy {
//            from jar
//            into stageDir
//        }
//    }
//}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

